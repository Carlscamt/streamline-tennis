"""
ðŸŽ¾ TENNIS MATCH PREDICTION - BETTING STRATEGY
============================================

KELLY CRITERION BETTING WITH UNCERTAINTY SHRINKAGE
=================================================
This module implements an advanced betting strategy that combines the Kelly Criterion
with uncertainty-based position sizing for tennis match betting. It accounts for
model confidence and provides responsible betting recommendations.

ðŸŽ¯ CORE STRATEGY:
================
â€¢ Kelly Criterion: Optimal bet sizing for long-term growth
â€¢ Uncertainty Shrinkage: Reduces bet size when model is uncertain
â€¢ Risk Management: Maximum bet limits and minimum probability thresholds
â€¢ Fair Odds Calculation: Determines value betting opportunities

ðŸ“Š BETTING METHODOLOGY:
======================

Kelly Criterion Formula:
f = (bp - q) / b
Where:
â€¢ f = fraction of bankroll to bet
â€¢ b = odds - 1 (net odds)
â€¢ p = probability of winning
â€¢ q = probability of losing (1 - p)

Uncertainty Shrinkage:
â€¢ Calculates model uncertainty: 1 - 2 * |p - 0.5|
â€¢ Reduces bet size when uncertainty > threshold
â€¢ Protects against overconfident predictions

Risk Controls:
â€¢ Minimum probability threshold (default: 55%)
â€¢ Maximum bet fraction (default: 10% of bankroll)
â€¢ Uncertainty threshold (default: 30%)
â€¢ Shrinkage factor (default: 50% reduction)

ðŸŽ® KEY FEATURES:
===============
â€¢ Conservative Approach: Prioritizes bankroll preservation
â€¢ Model-Aware: Adjusts to prediction confidence
â€¢ Flexible Parameters: Customizable risk tolerance
â€¢ Fair Value Analysis: Identifies profitable betting opportunities

ðŸ”§ TECHNICAL IMPLEMENTATION:
===========================

UncertaintyShrinkageBetting Class:
â€¢ Manages bankroll and betting parameters
â€¢ Calculates optimal bet sizes using Kelly Criterion
â€¢ Applies uncertainty-based adjustments
â€¢ Provides fair odds calculations

Key Methods:
â€¢ calculate_kelly_fraction(): Core betting logic
â€¢ calculate_uncertainty(): Model confidence assessment
â€¢ get_fair_odds(): Fair value calculation
â€¢ Various risk management checks

ðŸŽ¯ USAGE EXAMPLES:
=================

Basic Usage:
  betting = UncertaintyShrinkageBetting(initial_bankroll=1000)
  bet_fraction, odds = betting.calculate_kelly_fraction(prob=0.65, market_odds=2.5)

Custom Parameters:
  betting = UncertaintyShrinkageBetting(
      initial_bankroll=5000,
      min_prob=0.60,           # Higher confidence threshold
      shrinkage_factor=0.3,    # Less conservative shrinkage
      uncertainty_threshold=0.25
  )

Fair Odds Analysis:
  fair_odds = betting.get_fair_odds(prob=0.65)  # Returns ~1.54
  # If market offers 2.0, there's value betting opportunity

ðŸš€ INTEGRATION WITH PREDICTION SYSTEM:
=====================================
This module integrates seamlessly with the tennis prediction pipeline:
â€¢ Receives probabilities from match_predictor.py
â€¢ Provides betting recommendations in the Streamlit interface
â€¢ Accounts for XGBoost model uncertainty
â€¢ Suggests optimal position sizing

ðŸ’¡ RESPONSIBLE BETTING:
======================
â€¢ Never bet more than you can afford to lose
â€¢ This system is for educational/research purposes
â€¢ Past performance doesn't guarantee future results
â€¢ Consider transaction costs and market liquidity
â€¢ Implement additional risk controls as needed

ðŸ”§ CUSTOMIZATION OPTIONS:
========================
â€¢ Bankroll Management: Adjust initial bankroll size
â€¢ Risk Tolerance: Modify max bet fraction and thresholds
â€¢ Uncertainty Handling: Change shrinkage factors
â€¢ Probability Filters: Set minimum confidence levels

ðŸ”— RELATED FILES:
================
â€¢ match_predictor.py: Uses this for betting recommendations
â€¢ features.py: Provides prediction probabilities
â€¢ Streamlit UI: Displays betting advice to users
"""

import numpy as np

class UncertaintyShrinkageBetting:
    def __init__(self, initial_bankroll=1000, min_prob=0.55, shrinkage_factor=0.5, uncertainty_threshold=0.3):
        self.bankroll = initial_bankroll
        self.min_prob = min_prob
        self.shrinkage_factor = shrinkage_factor
        self.uncertainty_threshold = uncertainty_threshold
        self.max_bet_fraction = 0.10

    def calculate_uncertainty(self, prob):
        return 1 - 2 * abs(prob - 0.5)

    def calculate_kelly_fraction(self, prob, market_odds):
        # Standard Kelly Criterion calculation
        b = market_odds - 1
        q = 1 - prob
        f = (b * prob - q) / b if b > 0 else 0

        # Apply uncertainty shrinkage
        uncertainty = self.calculate_uncertainty(prob)
        if uncertainty > self.uncertainty_threshold:
            f *= (1 - self.shrinkage_factor)

        # Ensure bet size is within limits
        return min(max(f, 0), self.max_bet_fraction), market_odds
        
    def get_fair_odds(self, prob):
        """
        Calculate fair odds based on probability
        """
        return 1 / prob if prob > 0 else float('inf')
